#!/usr/bin/env python3
"""
Analyze sequences generated by ProteinMPNN.

Calculates sequence diversity, composition, and other metrics.
"""

import argparse
from pathlib import Path
from Bio import SeqIO
import pandas as pd
import numpy as np
from collections import Counter


def calculate_sequence_identity(seq1, seq2):
    """Calculate percent identity between two sequences."""
    if len(seq1) != len(seq2):
        return 0.0
    matches = sum(a == b for a, b in zip(seq1, seq2))
    return 100 * matches / len(seq1)


def analyze_sequences(fasta_file, output_csv=None):
    """
    Analyze sequences from ProteinMPNN output.
    
    Args:
        fasta_file: Path to FASTA file with sequences
        output_csv: Optional path to save analysis results
    """
    # Read sequences
    sequences = list(SeqIO.parse(fasta_file, 'fasta'))
    
    if not sequences:
        print(f"No sequences found in {fasta_file}")
        return
    
    print(f"Analyzing {len(sequences)} sequences from {fasta_file}")
    
    results = []
    
    for i, record in enumerate(sequences, 1):
        seq = str(record.seq)
        
        # Calculate composition
        aa_counts = Counter(seq)
        length = len(seq)
        
        # Calculate properties
        hydrophobic = sum(aa_counts[aa] for aa in 'AILMFVP') / length * 100
        charged = sum(aa_counts[aa] for aa in 'DEKR') / length * 100
        polar = sum(aa_counts[aa] for aa in 'STNYQC') / length * 100
        aromatic = sum(aa_counts[aa] for aa in 'FYW') / length * 100
        
        # Calculate diversity from first sequence
        identity_to_first = calculate_sequence_identity(seq, str(sequences[0].seq))
        
        results.append({
            'sequence_id': record.id,
            'length': length,
            'hydrophobic_%': round(hydrophobic, 1),
            'charged_%': round(charged, 1),
            'polar_%': round(polar, 1),
            'aromatic_%': round(aromatic, 1),
            'identity_to_seq1_%': round(identity_to_first, 1)
        })
    
    # Create DataFrame
    df = pd.DataFrame(results)
    
    # Calculate pairwise diversity
    identities = []
    for i in range(len(sequences)):
        for j in range(i + 1, len(sequences)):
            identity = calculate_sequence_identity(
                str(sequences[i].seq),
                str(sequences[j].seq)
            )
            identities.append(identity)
    
    print("\n=== Sequence Analysis Summary ===")
    print(f"Number of sequences: {len(sequences)}")
    print(f"Sequence length: {df['length'].iloc[0]}")
    print(f"\nComposition (mean ± std):")
    print(f"  Hydrophobic: {df['hydrophobic_%'].mean():.1f} ± {df['hydrophobic_%'].std():.1f}%")
    print(f"  Charged: {df['charged_%'].mean():.1f} ± {df['charged_%'].std():.1f}%")
    print(f"  Polar: {df['polar_%'].mean():.1f} ± {df['polar_%'].std():.1f}%")
    print(f"  Aromatic: {df['aromatic_%'].mean():.1f} ± {df['aromatic_%'].std():.1f}%")
    print(f"\nSequence Diversity:")
    print(f"  Mean pairwise identity: {np.mean(identities):.1f}%")
    print(f"  Min pairwise identity: {np.min(identities):.1f}%")
    print(f"  Max pairwise identity: {np.max(identities):.1f}%")
    
    # Save to CSV if requested
    if output_csv:
        df.to_csv(output_csv, index=False)
        print(f"\nDetailed results saved to {output_csv}")
    
    return df


def main():
    parser = argparse.ArgumentParser(
        description='Analyze ProteinMPNN sequence outputs'
    )
    parser.add_argument(
        '--fasta',
        type=str,
        required=True,
        help='FASTA file with designed sequences'
    )
    parser.add_argument(
        '--output_csv',
        type=str,
        default=None,
        help='Output CSV file for analysis results'
    )
    
    args = parser.parse_args()
    analyze_sequences(args.fasta, args.output_csv)


if __name__ == '__main__':
    main()
